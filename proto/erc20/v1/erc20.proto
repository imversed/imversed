syntax = "proto3";
package imversed.erc20.v1;

import "gogoproto/gogo.proto";
option go_package = "github.com/imversed/imversed/x/erc20/types";

// Owner enumerates the ownership of a ERC20 contract.
enum Owner {
  option (gogoproto.goproto_enum_prefix) = false;
  // OWNER_UNSPECIFIED defines an invalid/undefined owner.
  OWNER_UNSPECIFIED = 0;
  // OWNER_MODULE erc20 is owned by the erc20 module account.
  OWNER_MODULE = 1;
  // EXTERNAL erc20 is owned by an external account.
  OWNER_EXTERNAL = 2;
}

// TokenPair defines an instance that records pairing consisting of a Cosmos
// native Coin and an ERC20 token address.
message TokenPair {
  option (gogoproto.equal) = true;
  // address of ERC20 contract token
  string erc20_address = 1;
  // cosmos base denomination to be mapped to
  string denom = 2;
  // shows token mapping enable status
  bool enabled = 3;
  // ERC20 owner address ENUM (0 invalid, 1 ModuleAccount, 2 external address)
  Owner contract_owner = 4;

  string account_owner = 5;
}

// ToggleTokenRelayProposal is a gov Content type to toggle
// the internal relaying of a token pair.
message ToggleTokenRelayProposal {
  option (gogoproto.equal) = true;
  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 3;
}
