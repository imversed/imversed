syntax = "proto3";
package imversed.xverse;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "xverse/genesis.proto";
import "xverse/verse.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/imversed/imversed/x/xverse/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a verse by index.
  rpc Verse(QueryGetVerseRequest) returns (QueryGetVerseResponse) {
    option (google.api.http).get = "/imversed/imversed/xverse/verse/{verse_name}";
  }

  // Queries all verses.
  rpc VerseAll(QueryAllVerseRequest) returns (QueryAllVerseResponse) {
    option (google.api.http).get = "/imversed/imversed/xverse/verse";
  }

  // Queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/imversed/imversed/xverse/params";
  }

  rpc HasAsset(QueryHasAssetRequest) returns (QueryHasAssetResponse) {
    option (google.api.http).get = "/imversed/imversed/xverse/verse/{verse_name}/{asset_type}/{asset_id}";
  }

  rpc GetAssets(QueryGetVerseAssetsRequest) returns (QueryGetVerseAssetsResponse) {
    option (google.api.http).get = "/imversed/imversed/xverse/verse_assets/{verse_name}";
  }

  // this line is used by starport scaffolding # 2
}

message QueryGetVerseRequest {
  string verse_name = 1;
}

message QueryGetVerseResponse {
  Verse verse = 1 [(gogoproto.nullable) = false];
}

message QueryAllVerseRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVerseResponse {
  repeated Verse verse = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryHasAssetRequest {
  string verse_name = 1;

  string asset_type = 2;

  string asset_id = 3;
}

message QueryHasAssetResponse {
  bool has_asset = 1;
}

message QueryGetVerseAssetsRequest {
  string verse_name = 1;
}

message QueryGetVerseAssetsResponse {
  repeated string assets = 1;
}
// this line is used by starport scaffolding # 3
