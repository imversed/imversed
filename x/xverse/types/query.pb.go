// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xverse/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetVerseRequest struct {
	VerseName string `protobuf:"bytes,1,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
}

func (m *QueryGetVerseRequest) Reset()         { *m = QueryGetVerseRequest{} }
func (m *QueryGetVerseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerseRequest) ProtoMessage()    {}
func (*QueryGetVerseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{0}
}
func (m *QueryGetVerseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerseRequest.Merge(m, src)
}
func (m *QueryGetVerseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerseRequest proto.InternalMessageInfo

func (m *QueryGetVerseRequest) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

type QueryGetVerseResponse struct {
	Verse Verse `protobuf:"bytes,1,opt,name=verse,proto3" json:"verse"`
}

func (m *QueryGetVerseResponse) Reset()         { *m = QueryGetVerseResponse{} }
func (m *QueryGetVerseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerseResponse) ProtoMessage()    {}
func (*QueryGetVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{1}
}
func (m *QueryGetVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerseResponse.Merge(m, src)
}
func (m *QueryGetVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerseResponse proto.InternalMessageInfo

func (m *QueryGetVerseResponse) GetVerse() Verse {
	if m != nil {
		return m.Verse
	}
	return Verse{}
}

type QueryAllVerseRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVerseRequest) Reset()         { *m = QueryAllVerseRequest{} }
func (m *QueryAllVerseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVerseRequest) ProtoMessage()    {}
func (*QueryAllVerseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{2}
}
func (m *QueryAllVerseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerseRequest.Merge(m, src)
}
func (m *QueryAllVerseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerseRequest proto.InternalMessageInfo

func (m *QueryAllVerseRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVerseResponse struct {
	Verse      []Verse             `protobuf:"bytes,1,rep,name=verse,proto3" json:"verse"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVerseResponse) Reset()         { *m = QueryAllVerseResponse{} }
func (m *QueryAllVerseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVerseResponse) ProtoMessage()    {}
func (*QueryAllVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{3}
}
func (m *QueryAllVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerseResponse.Merge(m, src)
}
func (m *QueryAllVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerseResponse proto.InternalMessageInfo

func (m *QueryAllVerseResponse) GetVerse() []Verse {
	if m != nil {
		return m.Verse
	}
	return nil
}

func (m *QueryAllVerseResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryHasAssetRequest struct {
	VerseName string `protobuf:"bytes,1,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	AssetType string `protobuf:"bytes,2,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	AssetId   string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QueryHasAssetRequest) Reset()         { *m = QueryHasAssetRequest{} }
func (m *QueryHasAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHasAssetRequest) ProtoMessage()    {}
func (*QueryHasAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{6}
}
func (m *QueryHasAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasAssetRequest.Merge(m, src)
}
func (m *QueryHasAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasAssetRequest proto.InternalMessageInfo

func (m *QueryHasAssetRequest) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *QueryHasAssetRequest) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *QueryHasAssetRequest) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

type QueryHasAssetResponse struct {
	HasAsset bool `protobuf:"varint,1,opt,name=has_asset,json=hasAsset,proto3" json:"has_asset,omitempty"`
}

func (m *QueryHasAssetResponse) Reset()         { *m = QueryHasAssetResponse{} }
func (m *QueryHasAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHasAssetResponse) ProtoMessage()    {}
func (*QueryHasAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{7}
}
func (m *QueryHasAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasAssetResponse.Merge(m, src)
}
func (m *QueryHasAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasAssetResponse proto.InternalMessageInfo

func (m *QueryHasAssetResponse) GetHasAsset() bool {
	if m != nil {
		return m.HasAsset
	}
	return false
}

type QueryGetVerseAssetsRequest struct {
	VerseName string `protobuf:"bytes,1,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
}

func (m *QueryGetVerseAssetsRequest) Reset()         { *m = QueryGetVerseAssetsRequest{} }
func (m *QueryGetVerseAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerseAssetsRequest) ProtoMessage()    {}
func (*QueryGetVerseAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{8}
}
func (m *QueryGetVerseAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerseAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerseAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerseAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerseAssetsRequest.Merge(m, src)
}
func (m *QueryGetVerseAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerseAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerseAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerseAssetsRequest proto.InternalMessageInfo

func (m *QueryGetVerseAssetsRequest) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

type QueryGetVerseAssetsResponse struct {
	Assets []string `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (m *QueryGetVerseAssetsResponse) Reset()         { *m = QueryGetVerseAssetsResponse{} }
func (m *QueryGetVerseAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerseAssetsResponse) ProtoMessage()    {}
func (*QueryGetVerseAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{9}
}
func (m *QueryGetVerseAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerseAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerseAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerseAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerseAssetsResponse.Merge(m, src)
}
func (m *QueryGetVerseAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerseAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerseAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerseAssetsResponse proto.InternalMessageInfo

func (m *QueryGetVerseAssetsResponse) GetAssets() []string {
	if m != nil {
		return m.Assets
	}
	return nil
}

type QueryGetVersesByOwnerRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination   *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OwnerAddress string             `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (m *QueryGetVersesByOwnerRequest) Reset()         { *m = QueryGetVersesByOwnerRequest{} }
func (m *QueryGetVersesByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVersesByOwnerRequest) ProtoMessage()    {}
func (*QueryGetVersesByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{10}
}
func (m *QueryGetVersesByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVersesByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVersesByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVersesByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVersesByOwnerRequest.Merge(m, src)
}
func (m *QueryGetVersesByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVersesByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVersesByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVersesByOwnerRequest proto.InternalMessageInfo

func (m *QueryGetVersesByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetVersesByOwnerRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

type QueryGetVersesByOwnerResponse struct {
	Verses     []Verse             `protobuf:"bytes,1,rep,name=verses,proto3" json:"verses"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetVersesByOwnerResponse) Reset()         { *m = QueryGetVersesByOwnerResponse{} }
func (m *QueryGetVersesByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVersesByOwnerResponse) ProtoMessage()    {}
func (*QueryGetVersesByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c2038c44b9f87f5, []int{11}
}
func (m *QueryGetVersesByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVersesByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVersesByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVersesByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVersesByOwnerResponse.Merge(m, src)
}
func (m *QueryGetVersesByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVersesByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVersesByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVersesByOwnerResponse proto.InternalMessageInfo

func (m *QueryGetVersesByOwnerResponse) GetVerses() []Verse {
	if m != nil {
		return m.Verses
	}
	return nil
}

func (m *QueryGetVersesByOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetVerseRequest)(nil), "imversed.xverse.QueryGetVerseRequest")
	proto.RegisterType((*QueryGetVerseResponse)(nil), "imversed.xverse.QueryGetVerseResponse")
	proto.RegisterType((*QueryAllVerseRequest)(nil), "imversed.xverse.QueryAllVerseRequest")
	proto.RegisterType((*QueryAllVerseResponse)(nil), "imversed.xverse.QueryAllVerseResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "imversed.xverse.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "imversed.xverse.QueryParamsResponse")
	proto.RegisterType((*QueryHasAssetRequest)(nil), "imversed.xverse.QueryHasAssetRequest")
	proto.RegisterType((*QueryHasAssetResponse)(nil), "imversed.xverse.QueryHasAssetResponse")
	proto.RegisterType((*QueryGetVerseAssetsRequest)(nil), "imversed.xverse.QueryGetVerseAssetsRequest")
	proto.RegisterType((*QueryGetVerseAssetsResponse)(nil), "imversed.xverse.QueryGetVerseAssetsResponse")
	proto.RegisterType((*QueryGetVersesByOwnerRequest)(nil), "imversed.xverse.QueryGetVersesByOwnerRequest")
	proto.RegisterType((*QueryGetVersesByOwnerResponse)(nil), "imversed.xverse.QueryGetVersesByOwnerResponse")
}

func init() { proto.RegisterFile("xverse/query.proto", fileDescriptor_3c2038c44b9f87f5) }

var fileDescriptor_3c2038c44b9f87f5 = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xbb, 0x20, 0xa5, 0x7d, 0x4a, 0x4c, 0xc6, 0x8a, 0x58, 0xa0, 0xe0, 0xa0, 0x40, 0x04,
	0x77, 0xc3, 0x8f, 0x1e, 0x0c, 0xa7, 0x12, 0x05, 0x8d, 0x44, 0xb1, 0x31, 0x1e, 0x3c, 0xd8, 0x4c,
	0xe9, 0x64, 0xd9, 0xa4, 0xdd, 0x59, 0x3a, 0x0b, 0xda, 0x90, 0x5e, 0xb8, 0xea, 0xc1, 0x44, 0xcf,
	0x5c, 0x3c, 0x78, 0xf6, 0xbf, 0xe0, 0x48, 0xe2, 0xc5, 0x93, 0x31, 0xe0, 0x1f, 0x62, 0xf6, 0xcd,
	0xac, 0x65, 0x97, 0x96, 0xd6, 0x84, 0x0b, 0xe9, 0xbe, 0xf9, 0xbe, 0xf7, 0x3e, 0xf3, 0xe6, 0xbd,
	0x17, 0x80, 0xbc, 0xdf, 0xe3, 0x75, 0xc9, 0xad, 0x9d, 0x5d, 0x5e, 0x6f, 0x98, 0x5e, 0x5d, 0xf8,
	0x82, 0x5c, 0x77, 0x6a, 0x68, 0xac, 0x98, 0xea, 0x30, 0x9b, 0xb1, 0x85, 0x2d, 0xf0, 0xcc, 0x0a,
	0x7e, 0x29, 0x59, 0x76, 0xcc, 0x16, 0xc2, 0xae, 0x72, 0x8b, 0x79, 0x8e, 0xc5, 0x5c, 0x57, 0xf8,
	0xcc, 0x77, 0x84, 0x2b, 0xf5, 0xe9, 0xfd, 0x2d, 0x21, 0x6b, 0x42, 0x5a, 0x65, 0x16, 0x46, 0xb7,
	0xf6, 0x16, 0xca, 0xdc, 0x67, 0x0b, 0x96, 0xc7, 0x6c, 0xc7, 0x45, 0xb1, 0xd6, 0x66, 0x34, 0x84,
	0xcd, 0x5d, 0x2e, 0x9d, 0x30, 0x42, 0x88, 0x86, 0x7f, 0x95, 0x8d, 0xe6, 0x21, 0xf3, 0x32, 0x88,
	0xb5, 0xce, 0xfd, 0xd7, 0x81, 0xb9, 0xc8, 0x77, 0x76, 0xb9, 0xf4, 0xc9, 0x38, 0x00, 0xca, 0x4a,
	0x2e, 0xab, 0xf1, 0x11, 0x63, 0xd2, 0x98, 0x4d, 0x17, 0xd3, 0x68, 0x79, 0xce, 0x6a, 0x9c, 0x3e,
	0x83, 0x9b, 0x31, 0x37, 0xe9, 0x09, 0x57, 0x72, 0xb2, 0x08, 0x03, 0xa8, 0x42, 0x97, 0xab, 0x8b,
	0xc3, 0x66, 0xec, 0xea, 0x26, 0xca, 0x57, 0xaf, 0x1c, 0xfd, 0x9a, 0x48, 0x14, 0x95, 0x94, 0xbe,
	0xd5, 0x0c, 0x85, 0x6a, 0x35, 0xc2, 0xb0, 0x06, 0xd0, 0xba, 0x99, 0x0e, 0x38, 0x6d, 0xaa, 0x32,
	0x98, 0x41, 0x19, 0x4c, 0x55, 0x64, 0x5d, 0x06, 0x73, 0x93, 0xd9, 0xa1, 0x6f, 0xf1, 0x8c, 0x27,
	0xfd, 0x62, 0x68, 0xda, 0x56, 0x82, 0xf3, 0xb4, 0xfd, 0x3d, 0xd2, 0x92, 0xf5, 0x08, 0x55, 0x1f,
	0x52, 0xcd, 0x74, 0xa5, 0x52, 0x09, 0x23, 0x58, 0x19, 0x20, 0x48, 0xb5, 0xc9, 0xea, 0xac, 0x26,
	0x35, 0x38, 0xdd, 0x80, 0x1b, 0x11, 0xab, 0x26, 0xcd, 0x43, 0xd2, 0x43, 0x8b, 0xae, 0xc3, 0xad,
	0x73, 0xa8, 0xca, 0x41, 0xb3, 0x6a, 0x31, 0x15, 0xba, 0xb4, 0x4f, 0x98, 0x2c, 0x48, 0xc9, 0xfd,
	0xde, 0x9e, 0x37, 0x38, 0x66, 0x81, 0xbc, 0xe4, 0x37, 0x3c, 0x8e, 0x77, 0x4c, 0x17, 0xd3, 0x68,
	0x79, 0xd5, 0xf0, 0x38, 0xb9, 0x0d, 0x29, 0x75, 0xec, 0x54, 0x46, 0xfa, 0xf1, 0x70, 0x10, 0xbf,
	0x9f, 0x56, 0xe8, 0xb2, 0x2e, 0x75, 0x2b, 0xa1, 0xbe, 0xc0, 0x28, 0xa4, 0xb7, 0x99, 0x2c, 0xa1,
	0x0e, 0x13, 0xa6, 0x8a, 0xa9, 0x6d, 0x2d, 0xa2, 0x2b, 0x90, 0x8d, 0xb4, 0x13, 0x5a, 0x65, 0x8f,
	0xbd, 0x98, 0x87, 0xd1, 0xb6, 0xce, 0x3a, 0xf1, 0x30, 0x24, 0x31, 0xa9, 0xc4, 0x47, 0x4e, 0x17,
	0xf5, 0x17, 0xfd, 0x60, 0xc0, 0x58, 0xc4, 0x4f, 0xae, 0x36, 0x5e, 0xbc, 0x73, 0x79, 0xfd, 0x92,
	0xdb, 0x8f, 0x4c, 0xc1, 0x90, 0x08, 0xe2, 0x96, 0x58, 0xa5, 0x52, 0xe7, 0x52, 0xea, 0x7a, 0x5e,
	0x43, 0x63, 0x41, 0xd9, 0xe8, 0xa1, 0x01, 0xe3, 0x1d, 0x68, 0xf4, 0x3d, 0x96, 0x21, 0x89, 0x77,
	0x96, 0x3d, 0x35, 0xab, 0xd6, 0x5e, 0x5a, 0xb7, 0x2e, 0x1e, 0x0e, 0xc2, 0x00, 0x02, 0x92, 0x8f,
	0x06, 0x0c, 0x60, 0x2a, 0x72, 0xef, 0x1c, 0x42, 0xbb, 0x5d, 0x92, 0x9d, 0xee, 0x26, 0x53, 0xe9,
	0xe8, 0xf2, 0xc1, 0x8f, 0x3f, 0x9f, 0xfb, 0x4c, 0x32, 0x6f, 0x85, 0xfa, 0xd6, 0x8f, 0xb3, 0xab,
	0xcb, 0xda, 0x6f, 0xb5, 0x43, 0x93, 0x1c, 0x18, 0x90, 0x52, 0xef, 0x5e, 0xad, 0x76, 0x22, 0x8a,
	0x6d, 0x96, 0x4e, 0x44, 0xf1, 0xfd, 0x40, 0x67, 0x90, 0xe8, 0x0e, 0x99, 0xe8, 0x42, 0x44, 0x9a,
	0x90, 0x54, 0xf3, 0x47, 0xa6, 0xda, 0x87, 0x8e, 0x0c, 0x79, 0xf6, 0xee, 0xc5, 0x22, 0x9d, 0x7d,
	0x16, 0xb3, 0x53, 0x32, 0xd9, 0x39, 0xbb, 0x1a, 0x73, 0xf2, 0xcd, 0x80, 0x54, 0x38, 0x71, 0x9d,
	0x6a, 0x10, 0x5b, 0x01, 0x9d, 0x6a, 0x10, 0x1f, 0x5c, 0xba, 0x81, 0x14, 0x6b, 0xe4, 0xd1, 0xff,
	0xbc, 0x8a, 0xb5, 0xdf, 0xda, 0x1f, 0xff, 0x3e, 0x9c, 0x4a, 0x93, 0x7c, 0x35, 0x20, 0xbd, 0xce,
	0x7d, 0x35, 0xa3, 0x64, 0xee, 0xe2, 0xce, 0x88, 0xac, 0x81, 0xec, 0x7c, 0x6f, 0x62, 0x8d, 0xbd,
	0x82, 0xd8, 0x79, 0xb2, 0xd4, 0x05, 0x5b, 0x6d, 0x24, 0x19, 0xed, 0xa9, 0xef, 0x06, 0x0c, 0x45,
	0xa6, 0x90, 0x3c, 0xb8, 0x38, 0x79, 0x6c, 0x77, 0x64, 0xcd, 0x5e, 0xe5, 0x9a, 0xb6, 0x80, 0xb4,
	0x2b, 0xe4, 0x61, 0x17, 0x5a, 0x59, 0x2a, 0x37, 0x4a, 0xb8, 0x38, 0xac, 0xfd, 0xc8, 0x52, 0x69,
	0xae, 0x3e, 0x3e, 0x3a, 0xc9, 0x19, 0xc7, 0x27, 0x39, 0xe3, 0xf7, 0x49, 0xce, 0xf8, 0x74, 0x9a,
	0x4b, 0x1c, 0x9f, 0xe6, 0x12, 0x3f, 0x4f, 0x73, 0x89, 0x37, 0x73, 0xb6, 0xe3, 0x6f, 0xef, 0x96,
	0xcd, 0x2d, 0x51, 0x6b, 0x17, 0x3e, 0x4c, 0x10, 0xbc, 0x95, 0x2c, 0x27, 0xf1, 0xff, 0x82, 0xa5,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x53, 0x07, 0x50, 0x9b, 0xc8, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a verse by index.
	Verse(ctx context.Context, in *QueryGetVerseRequest, opts ...grpc.CallOption) (*QueryGetVerseResponse, error)
	// Queries all verses.
	VerseAll(ctx context.Context, in *QueryAllVerseRequest, opts ...grpc.CallOption) (*QueryAllVerseResponse, error)
	// Queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	HasAsset(ctx context.Context, in *QueryHasAssetRequest, opts ...grpc.CallOption) (*QueryHasAssetResponse, error)
	GetAssets(ctx context.Context, in *QueryGetVerseAssetsRequest, opts ...grpc.CallOption) (*QueryGetVerseAssetsResponse, error)
	VersesByOwner(ctx context.Context, in *QueryGetVersesByOwnerRequest, opts ...grpc.CallOption) (*QueryGetVersesByOwnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Verse(ctx context.Context, in *QueryGetVerseRequest, opts ...grpc.CallOption) (*QueryGetVerseResponse, error) {
	out := new(QueryGetVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Query/Verse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerseAll(ctx context.Context, in *QueryAllVerseRequest, opts ...grpc.CallOption) (*QueryAllVerseResponse, error) {
	out := new(QueryAllVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Query/VerseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HasAsset(ctx context.Context, in *QueryHasAssetRequest, opts ...grpc.CallOption) (*QueryHasAssetResponse, error) {
	out := new(QueryHasAssetResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Query/HasAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAssets(ctx context.Context, in *QueryGetVerseAssetsRequest, opts ...grpc.CallOption) (*QueryGetVerseAssetsResponse, error) {
	out := new(QueryGetVerseAssetsResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Query/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VersesByOwner(ctx context.Context, in *QueryGetVersesByOwnerRequest, opts ...grpc.CallOption) (*QueryGetVersesByOwnerResponse, error) {
	out := new(QueryGetVersesByOwnerResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Query/VersesByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a verse by index.
	Verse(context.Context, *QueryGetVerseRequest) (*QueryGetVerseResponse, error)
	// Queries all verses.
	VerseAll(context.Context, *QueryAllVerseRequest) (*QueryAllVerseResponse, error)
	// Queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	HasAsset(context.Context, *QueryHasAssetRequest) (*QueryHasAssetResponse, error)
	GetAssets(context.Context, *QueryGetVerseAssetsRequest) (*QueryGetVerseAssetsResponse, error)
	VersesByOwner(context.Context, *QueryGetVersesByOwnerRequest) (*QueryGetVersesByOwnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Verse(ctx context.Context, req *QueryGetVerseRequest) (*QueryGetVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verse not implemented")
}
func (*UnimplementedQueryServer) VerseAll(ctx context.Context, req *QueryAllVerseRequest) (*QueryAllVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerseAll not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) HasAsset(ctx context.Context, req *QueryHasAssetRequest) (*QueryHasAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasAsset not implemented")
}
func (*UnimplementedQueryServer) GetAssets(ctx context.Context, req *QueryGetVerseAssetsRequest) (*QueryGetVerseAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (*UnimplementedQueryServer) VersesByOwner(ctx context.Context, req *QueryGetVersesByOwnerRequest) (*QueryGetVersesByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersesByOwner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Verse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVerseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Verse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Query/Verse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Verse(ctx, req.(*QueryGetVerseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVerseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Query/VerseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerseAll(ctx, req.(*QueryAllVerseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HasAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHasAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HasAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Query/HasAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HasAsset(ctx, req.(*QueryHasAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVerseAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Query/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAssets(ctx, req.(*QueryGetVerseAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VersesByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVersesByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VersesByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Query/VersesByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VersesByOwner(ctx, req.(*QueryGetVersesByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imversed.xverse.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verse",
			Handler:    _Query_Verse_Handler,
		},
		{
			MethodName: "VerseAll",
			Handler:    _Query_VerseAll_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "HasAsset",
			Handler:    _Query_HasAsset_Handler,
		},
		{
			MethodName: "GetAssets",
			Handler:    _Query_GetAssets_Handler,
		},
		{
			MethodName: "VersesByOwner",
			Handler:    _Query_VersesByOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xverse/query.proto",
}

func (m *QueryGetVerseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Verse.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVerseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Verse) > 0 {
		for iNdEx := len(m.Verse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryHasAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AssetType) > 0 {
		i -= len(m.AssetType)
		copy(dAtA[i:], m.AssetType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHasAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasAsset {
		i--
		if m.HasAsset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerseAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerseAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerseAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerseAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerseAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerseAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Assets[iNdEx])
			copy(dAtA[i:], m.Assets[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Assets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVersesByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVersesByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVersesByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVersesByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVersesByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVersesByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Verses) > 0 {
		for iNdEx := len(m.Verses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetVerseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Verse.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVerseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Verse) > 0 {
		for _, e := range m.Verse {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryHasAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHasAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasAsset {
		n += 2
	}
	return n
}

func (m *QueryGetVerseAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVerseAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, s := range m.Assets {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetVersesByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVersesByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Verses) > 0 {
		for _, e := range m.Verses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetVerseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Verse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verse = append(m.Verse, Verse{})
			if err := m.Verse[len(m.Verse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAsset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAsset = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerseAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerseAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerseAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerseAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerseAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerseAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVersesByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVersesByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVersesByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVersesByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVersesByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVersesByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verses = append(m.Verses, Verse{})
			if err := m.Verses[len(m.Verses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
