// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xverse/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateVerse struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Icon        string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgCreateVerse) Reset()         { *m = MsgCreateVerse{} }
func (m *MsgCreateVerse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVerse) ProtoMessage()    {}
func (*MsgCreateVerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{0}
}
func (m *MsgCreateVerse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVerse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVerse.Merge(m, src)
}
func (m *MsgCreateVerse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVerse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVerse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVerse proto.InternalMessageInfo

func (m *MsgCreateVerse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateVerse) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MsgCreateVerse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgCreateVerseResponse struct {
}

func (m *MsgCreateVerseResponse) Reset()         { *m = MsgCreateVerseResponse{} }
func (m *MsgCreateVerseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVerseResponse) ProtoMessage()    {}
func (*MsgCreateVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{1}
}
func (m *MsgCreateVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVerseResponse.Merge(m, src)
}
func (m *MsgCreateVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVerseResponse proto.InternalMessageInfo

type MsgAddAssetToVerse struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseName    string `protobuf:"bytes,2,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	AssetType    string `protobuf:"bytes,3,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	AssetId      string `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	AssetCreator string `protobuf:"bytes,5,opt,name=asset_creator,json=assetCreator,proto3" json:"asset_creator,omitempty"`
	VerseCreator string `protobuf:"bytes,6,opt,name=verse_creator,json=verseCreator,proto3" json:"verse_creator,omitempty"`
}

func (m *MsgAddAssetToVerse) Reset()         { *m = MsgAddAssetToVerse{} }
func (m *MsgAddAssetToVerse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAssetToVerse) ProtoMessage()    {}
func (*MsgAddAssetToVerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{2}
}
func (m *MsgAddAssetToVerse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAssetToVerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAssetToVerse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAssetToVerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAssetToVerse.Merge(m, src)
}
func (m *MsgAddAssetToVerse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAssetToVerse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAssetToVerse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAssetToVerse proto.InternalMessageInfo

func (m *MsgAddAssetToVerse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddAssetToVerse) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *MsgAddAssetToVerse) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *MsgAddAssetToVerse) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *MsgAddAssetToVerse) GetAssetCreator() string {
	if m != nil {
		return m.AssetCreator
	}
	return ""
}

func (m *MsgAddAssetToVerse) GetVerseCreator() string {
	if m != nil {
		return m.VerseCreator
	}
	return ""
}

type MsgAddAssetToVerseResponse struct {
}

func (m *MsgAddAssetToVerseResponse) Reset()         { *m = MsgAddAssetToVerseResponse{} }
func (m *MsgAddAssetToVerseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAssetToVerseResponse) ProtoMessage()    {}
func (*MsgAddAssetToVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{3}
}
func (m *MsgAddAssetToVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAssetToVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAssetToVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAssetToVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAssetToVerseResponse.Merge(m, src)
}
func (m *MsgAddAssetToVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAssetToVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAssetToVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAssetToVerseResponse proto.InternalMessageInfo

type MsgRenameVerse struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseCreator string `protobuf:"bytes,2,opt,name=verse_creator,json=verseCreator,proto3" json:"verse_creator,omitempty"`
	VerseOldName string `protobuf:"bytes,3,opt,name=verse_old_name,json=verseOldName,proto3" json:"verse_old_name,omitempty"`
	VerseNewName string `protobuf:"bytes,4,opt,name=verse_new_name,json=verseNewName,proto3" json:"verse_new_name,omitempty"`
}

func (m *MsgRenameVerse) Reset()         { *m = MsgRenameVerse{} }
func (m *MsgRenameVerse) String() string { return proto.CompactTextString(m) }
func (*MsgRenameVerse) ProtoMessage()    {}
func (*MsgRenameVerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{4}
}
func (m *MsgRenameVerse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRenameVerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRenameVerse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRenameVerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRenameVerse.Merge(m, src)
}
func (m *MsgRenameVerse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRenameVerse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRenameVerse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRenameVerse proto.InternalMessageInfo

func (m *MsgRenameVerse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRenameVerse) GetVerseCreator() string {
	if m != nil {
		return m.VerseCreator
	}
	return ""
}

func (m *MsgRenameVerse) GetVerseOldName() string {
	if m != nil {
		return m.VerseOldName
	}
	return ""
}

func (m *MsgRenameVerse) GetVerseNewName() string {
	if m != nil {
		return m.VerseNewName
	}
	return ""
}

type MsgRenameVerseResponse struct {
}

func (m *MsgRenameVerseResponse) Reset()         { *m = MsgRenameVerseResponse{} }
func (m *MsgRenameVerseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRenameVerseResponse) ProtoMessage()    {}
func (*MsgRenameVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{5}
}
func (m *MsgRenameVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRenameVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRenameVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRenameVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRenameVerseResponse.Merge(m, src)
}
func (m *MsgRenameVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRenameVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRenameVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRenameVerseResponse proto.InternalMessageInfo

type MsgRemoveAssetFromVerse struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseName    string `protobuf:"bytes,2,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	AssetType    string `protobuf:"bytes,3,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	AssetId      string `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	VerseCreator string `protobuf:"bytes,5,opt,name=verse_creator,json=verseCreator,proto3" json:"verse_creator,omitempty"`
}

func (m *MsgRemoveAssetFromVerse) Reset()         { *m = MsgRemoveAssetFromVerse{} }
func (m *MsgRemoveAssetFromVerse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAssetFromVerse) ProtoMessage()    {}
func (*MsgRemoveAssetFromVerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{6}
}
func (m *MsgRemoveAssetFromVerse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAssetFromVerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAssetFromVerse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAssetFromVerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAssetFromVerse.Merge(m, src)
}
func (m *MsgRemoveAssetFromVerse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAssetFromVerse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAssetFromVerse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAssetFromVerse proto.InternalMessageInfo

func (m *MsgRemoveAssetFromVerse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRemoveAssetFromVerse) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *MsgRemoveAssetFromVerse) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *MsgRemoveAssetFromVerse) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *MsgRemoveAssetFromVerse) GetVerseCreator() string {
	if m != nil {
		return m.VerseCreator
	}
	return ""
}

type MsgRemoveAssetFromVerseResponse struct {
}

func (m *MsgRemoveAssetFromVerseResponse) Reset()         { *m = MsgRemoveAssetFromVerseResponse{} }
func (m *MsgRemoveAssetFromVerseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAssetFromVerseResponse) ProtoMessage()    {}
func (*MsgRemoveAssetFromVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{7}
}
func (m *MsgRemoveAssetFromVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAssetFromVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAssetFromVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAssetFromVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAssetFromVerseResponse.Merge(m, src)
}
func (m *MsgRemoveAssetFromVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAssetFromVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAssetFromVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAssetFromVerseResponse proto.InternalMessageInfo

type MsgAddOracleToVerse struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseName string `protobuf:"bytes,2,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	Oracle    string `protobuf:"bytes,3,opt,name=oracle,proto3" json:"oracle,omitempty"`
}

func (m *MsgAddOracleToVerse) Reset()         { *m = MsgAddOracleToVerse{} }
func (m *MsgAddOracleToVerse) String() string { return proto.CompactTextString(m) }
func (*MsgAddOracleToVerse) ProtoMessage()    {}
func (*MsgAddOracleToVerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{8}
}
func (m *MsgAddOracleToVerse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOracleToVerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOracleToVerse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOracleToVerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOracleToVerse.Merge(m, src)
}
func (m *MsgAddOracleToVerse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOracleToVerse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOracleToVerse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOracleToVerse proto.InternalMessageInfo

func (m *MsgAddOracleToVerse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddOracleToVerse) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *MsgAddOracleToVerse) GetOracle() string {
	if m != nil {
		return m.Oracle
	}
	return ""
}

type MsgAddOracleToVerseResponse struct {
}

func (m *MsgAddOracleToVerseResponse) Reset()         { *m = MsgAddOracleToVerseResponse{} }
func (m *MsgAddOracleToVerseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddOracleToVerseResponse) ProtoMessage()    {}
func (*MsgAddOracleToVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{9}
}
func (m *MsgAddOracleToVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOracleToVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOracleToVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOracleToVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOracleToVerseResponse.Merge(m, src)
}
func (m *MsgAddOracleToVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOracleToVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOracleToVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOracleToVerseResponse proto.InternalMessageInfo

type MsgAuthorizeKeyToVerse struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseName string `protobuf:"bytes,2,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgAuthorizeKeyToVerse) Reset()         { *m = MsgAuthorizeKeyToVerse{} }
func (m *MsgAuthorizeKeyToVerse) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeKeyToVerse) ProtoMessage()    {}
func (*MsgAuthorizeKeyToVerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{10}
}
func (m *MsgAuthorizeKeyToVerse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeKeyToVerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeKeyToVerse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeKeyToVerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeKeyToVerse.Merge(m, src)
}
func (m *MsgAuthorizeKeyToVerse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeKeyToVerse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeKeyToVerse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeKeyToVerse proto.InternalMessageInfo

func (m *MsgAuthorizeKeyToVerse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAuthorizeKeyToVerse) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *MsgAuthorizeKeyToVerse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgAuthorizeKeyToVerseResponse struct {
}

func (m *MsgAuthorizeKeyToVerseResponse) Reset()         { *m = MsgAuthorizeKeyToVerseResponse{} }
func (m *MsgAuthorizeKeyToVerseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeKeyToVerseResponse) ProtoMessage()    {}
func (*MsgAuthorizeKeyToVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{11}
}
func (m *MsgAuthorizeKeyToVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeKeyToVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeKeyToVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeKeyToVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeKeyToVerseResponse.Merge(m, src)
}
func (m *MsgAuthorizeKeyToVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeKeyToVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeKeyToVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeKeyToVerseResponse proto.InternalMessageInfo

type MsgDeauthorizeKeyToVerse struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseName string `protobuf:"bytes,2,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgDeauthorizeKeyToVerse) Reset()         { *m = MsgDeauthorizeKeyToVerse{} }
func (m *MsgDeauthorizeKeyToVerse) String() string { return proto.CompactTextString(m) }
func (*MsgDeauthorizeKeyToVerse) ProtoMessage()    {}
func (*MsgDeauthorizeKeyToVerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{12}
}
func (m *MsgDeauthorizeKeyToVerse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeauthorizeKeyToVerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeauthorizeKeyToVerse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeauthorizeKeyToVerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeauthorizeKeyToVerse.Merge(m, src)
}
func (m *MsgDeauthorizeKeyToVerse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeauthorizeKeyToVerse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeauthorizeKeyToVerse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeauthorizeKeyToVerse proto.InternalMessageInfo

func (m *MsgDeauthorizeKeyToVerse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDeauthorizeKeyToVerse) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *MsgDeauthorizeKeyToVerse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgDeauthorizeKeyToVerseResponse struct {
}

func (m *MsgDeauthorizeKeyToVerseResponse) Reset()         { *m = MsgDeauthorizeKeyToVerseResponse{} }
func (m *MsgDeauthorizeKeyToVerseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeauthorizeKeyToVerseResponse) ProtoMessage()    {}
func (*MsgDeauthorizeKeyToVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{13}
}
func (m *MsgDeauthorizeKeyToVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeauthorizeKeyToVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeauthorizeKeyToVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeauthorizeKeyToVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeauthorizeKeyToVerseResponse.Merge(m, src)
}
func (m *MsgDeauthorizeKeyToVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeauthorizeKeyToVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeauthorizeKeyToVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeauthorizeKeyToVerseResponse proto.InternalMessageInfo

type MsgUpdateVerseIcon struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseName string `protobuf:"bytes,2,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	Icon      string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *MsgUpdateVerseIcon) Reset()         { *m = MsgUpdateVerseIcon{} }
func (m *MsgUpdateVerseIcon) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerseIcon) ProtoMessage()    {}
func (*MsgUpdateVerseIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{14}
}
func (m *MsgUpdateVerseIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerseIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerseIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerseIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerseIcon.Merge(m, src)
}
func (m *MsgUpdateVerseIcon) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerseIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerseIcon.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerseIcon proto.InternalMessageInfo

func (m *MsgUpdateVerseIcon) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateVerseIcon) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *MsgUpdateVerseIcon) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type MsgUpdateVerseDescription struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VerseName   string `protobuf:"bytes,2,opt,name=verse_name,json=verseName,proto3" json:"verse_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgUpdateVerseDescription) Reset()         { *m = MsgUpdateVerseDescription{} }
func (m *MsgUpdateVerseDescription) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerseDescription) ProtoMessage()    {}
func (*MsgUpdateVerseDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{15}
}
func (m *MsgUpdateVerseDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerseDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerseDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerseDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerseDescription.Merge(m, src)
}
func (m *MsgUpdateVerseDescription) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerseDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerseDescription.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerseDescription proto.InternalMessageInfo

func (m *MsgUpdateVerseDescription) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateVerseDescription) GetVerseName() string {
	if m != nil {
		return m.VerseName
	}
	return ""
}

func (m *MsgUpdateVerseDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgUpdateVerseDescriptionResponse struct {
}

func (m *MsgUpdateVerseDescriptionResponse) Reset()         { *m = MsgUpdateVerseDescriptionResponse{} }
func (m *MsgUpdateVerseDescriptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerseDescriptionResponse) ProtoMessage()    {}
func (*MsgUpdateVerseDescriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{16}
}
func (m *MsgUpdateVerseDescriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerseDescriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerseDescriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerseDescriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerseDescriptionResponse.Merge(m, src)
}
func (m *MsgUpdateVerseDescriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerseDescriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerseDescriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerseDescriptionResponse proto.InternalMessageInfo

type MsgUpdateVerseIconResponse struct {
}

func (m *MsgUpdateVerseIconResponse) Reset()         { *m = MsgUpdateVerseIconResponse{} }
func (m *MsgUpdateVerseIconResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerseIconResponse) ProtoMessage()    {}
func (*MsgUpdateVerseIconResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a919e3cd847515, []int{17}
}
func (m *MsgUpdateVerseIconResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerseIconResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerseIconResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerseIconResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerseIconResponse.Merge(m, src)
}
func (m *MsgUpdateVerseIconResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerseIconResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerseIconResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerseIconResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateVerse)(nil), "imversed.xverse.MsgCreateVerse")
	proto.RegisterType((*MsgCreateVerseResponse)(nil), "imversed.xverse.MsgCreateVerseResponse")
	proto.RegisterType((*MsgAddAssetToVerse)(nil), "imversed.xverse.MsgAddAssetToVerse")
	proto.RegisterType((*MsgAddAssetToVerseResponse)(nil), "imversed.xverse.MsgAddAssetToVerseResponse")
	proto.RegisterType((*MsgRenameVerse)(nil), "imversed.xverse.MsgRenameVerse")
	proto.RegisterType((*MsgRenameVerseResponse)(nil), "imversed.xverse.MsgRenameVerseResponse")
	proto.RegisterType((*MsgRemoveAssetFromVerse)(nil), "imversed.xverse.MsgRemoveAssetFromVerse")
	proto.RegisterType((*MsgRemoveAssetFromVerseResponse)(nil), "imversed.xverse.MsgRemoveAssetFromVerseResponse")
	proto.RegisterType((*MsgAddOracleToVerse)(nil), "imversed.xverse.MsgAddOracleToVerse")
	proto.RegisterType((*MsgAddOracleToVerseResponse)(nil), "imversed.xverse.MsgAddOracleToVerseResponse")
	proto.RegisterType((*MsgAuthorizeKeyToVerse)(nil), "imversed.xverse.MsgAuthorizeKeyToVerse")
	proto.RegisterType((*MsgAuthorizeKeyToVerseResponse)(nil), "imversed.xverse.MsgAuthorizeKeyToVerseResponse")
	proto.RegisterType((*MsgDeauthorizeKeyToVerse)(nil), "imversed.xverse.MsgDeauthorizeKeyToVerse")
	proto.RegisterType((*MsgDeauthorizeKeyToVerseResponse)(nil), "imversed.xverse.MsgDeauthorizeKeyToVerseResponse")
	proto.RegisterType((*MsgUpdateVerseIcon)(nil), "imversed.xverse.MsgUpdateVerseIcon")
	proto.RegisterType((*MsgUpdateVerseDescription)(nil), "imversed.xverse.MsgUpdateVerseDescription")
	proto.RegisterType((*MsgUpdateVerseDescriptionResponse)(nil), "imversed.xverse.MsgUpdateVerseDescriptionResponse")
	proto.RegisterType((*MsgUpdateVerseIconResponse)(nil), "imversed.xverse.MsgUpdateVerseIconResponse")
}

func init() { proto.RegisterFile("xverse/tx.proto", fileDescriptor_61a919e3cd847515) }

var fileDescriptor_61a919e3cd847515 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x4e, 0xd4, 0x40,
	0x14, 0xa6, 0xfc, 0x2c, 0x72, 0x50, 0x30, 0x83, 0xae, 0xa5, 0x4a, 0x59, 0x0a, 0x89, 0x28, 0x66,
	0x57, 0xf1, 0x09, 0x10, 0x34, 0x21, 0x66, 0x21, 0x21, 0x28, 0x89, 0x17, 0x92, 0xb2, 0x73, 0x5c,
	0x1a, 0x69, 0xa7, 0xe9, 0x14, 0xd8, 0xf5, 0x29, 0xbc, 0xf5, 0x29, 0x7c, 0x04, 0x6f, 0xbd, 0x93,
	0x4b, 0x2f, 0x0d, 0xbc, 0x88, 0xe9, 0xb4, 0x1d, 0xba, 0xdd, 0x29, 0xdb, 0x40, 0xa2, 0x77, 0x9d,
	0x73, 0xbe, 0x9e, 0xef, 0x3b, 0x67, 0x66, 0xbe, 0x0c, 0x4c, 0x77, 0x4e, 0x30, 0xe0, 0xd8, 0x08,
	0x3b, 0x75, 0x3f, 0x60, 0x21, 0x23, 0xd3, 0x8e, 0x2b, 0x22, 0xb4, 0x1e, 0x67, 0xac, 0x8f, 0x30,
	0xd5, 0xe4, 0xed, 0xf5, 0x00, 0xed, 0x10, 0xdf, 0x47, 0x11, 0x52, 0x85, 0x0a, 0x47, 0x8f, 0x62,
	0xa0, 0x6b, 0x35, 0x6d, 0x79, 0x62, 0x27, 0x59, 0x11, 0x02, 0xa3, 0x4e, 0x8b, 0x79, 0xfa, 0x88,
	0x88, 0x8a, 0x6f, 0x52, 0x83, 0x49, 0x8a, 0xbc, 0x15, 0x38, 0x7e, 0xe8, 0x30, 0x4f, 0x1f, 0x15,
	0xa9, 0x6c, 0xc8, 0xd2, 0xa1, 0xda, 0x5b, 0x7f, 0x07, 0xb9, 0xcf, 0x3c, 0x8e, 0xd6, 0x2f, 0x0d,
	0x48, 0x93, 0xb7, 0xd7, 0x28, 0x5d, 0xe3, 0x1c, 0xc3, 0x5d, 0x76, 0x35, 0xfd, 0x1c, 0x80, 0x50,
	0xbc, 0xef, 0xd9, 0x2e, 0xea, 0xc3, 0x22, 0x37, 0x21, 0x22, 0x5b, 0xb6, 0x8b, 0x51, 0xda, 0x8e,
	0xca, 0xec, 0x87, 0x5d, 0x1f, 0x13, 0x8d, 0x13, 0x22, 0xb2, 0xdb, 0xf5, 0x91, 0xcc, 0xc2, 0xad,
	0x38, 0xed, 0xd0, 0x44, 0xe5, 0xb8, 0x58, 0x6f, 0x52, 0xb2, 0x08, 0x77, 0xe2, 0x54, 0x2b, 0x12,
	0xc9, 0x02, 0x7d, 0x4c, 0xe4, 0x6f, 0x8b, 0xe0, 0x7a, 0x1c, 0x8b, 0x40, 0x31, 0x7b, 0x0a, 0xaa,
	0xc4, 0x20, 0x11, 0x4c, 0x40, 0xd6, 0x23, 0x30, 0xfa, 0x1b, 0x92, 0xfd, 0x7e, 0xd3, 0xc4, 0xa8,
	0x77, 0x30, 0x6a, 0xe0, 0xea, 0x5e, 0xfb, 0xd8, 0x86, 0xfb, 0xd9, 0xc8, 0x12, 0x4c, 0xc5, 0x20,
	0x76, 0x44, 0xe3, 0xa1, 0x8c, 0x64, 0x50, 0xdb, 0x47, 0x54, 0xcc, 0x45, 0xa2, 0x3c, 0x3c, 0x8d,
	0x51, 0xa3, 0x19, 0xd4, 0x16, 0x9e, 0x46, 0xa8, 0x64, 0x97, 0x32, 0xd2, 0xa4, 0xea, 0xef, 0x1a,
	0x3c, 0x10, 0x29, 0x97, 0x9d, 0xa0, 0xe8, 0xeb, 0x4d, 0xc0, 0xdc, 0xff, 0xb7, 0x55, 0xbd, 0x73,
	0x19, 0x53, 0xec, 0xc2, 0x02, 0xcc, 0x17, 0x08, 0x96, 0x4d, 0x51, 0x98, 0x89, 0x37, 0x6a, 0x3b,
	0xb0, 0x5b, 0x47, 0x78, 0xc3, 0xa3, 0x57, 0x85, 0x0a, 0x13, 0x75, 0x92, 0x5e, 0x92, 0x95, 0x35,
	0x07, 0x0f, 0x15, 0x2c, 0x52, 0x84, 0x23, 0x66, 0xbe, 0x76, 0x1c, 0x1e, 0xb2, 0xc0, 0xf9, 0x82,
	0x6f, 0xb1, 0x7b, 0x43, 0x1d, 0x3a, 0x8c, 0xdb, 0x94, 0x06, 0xc8, 0x79, 0x22, 0x24, 0x5d, 0x5a,
	0x35, 0x30, 0xd5, 0x54, 0x52, 0xcc, 0x67, 0xd0, 0x9b, 0xbc, 0xbd, 0x81, 0xf6, 0xbf, 0x90, 0x63,
	0x41, 0xad, 0x88, 0x4c, 0x0a, 0xda, 0x17, 0xe6, 0xf0, 0xce, 0xa7, 0xa9, 0x6f, 0x6c, 0x46, 0x7e,
	0x73, 0x4d, 0x29, 0x0a, 0xeb, 0xb2, 0x42, 0x98, 0xed, 0x25, 0xd8, 0xb8, 0x74, 0xad, 0xeb, 0xf2,
	0x0c, 0xb6, 0xc3, 0x45, 0x58, 0x28, 0x64, 0x95, 0xbd, 0xc7, 0x3e, 0x92, 0xeb, 0x3d, 0xcd, 0xae,
	0xfe, 0x18, 0x87, 0x91, 0x26, 0x6f, 0x93, 0x3d, 0x98, 0xcc, 0xda, 0xf6, 0x7c, 0x3d, 0x67, 0xed,
	0xf5, 0x5e, 0xdf, 0x35, 0x1e, 0x0f, 0x00, 0xa4, 0x04, 0xa4, 0x05, 0xd3, 0x79, 0x53, 0x5e, 0x54,
	0xfd, 0x9b, 0x03, 0x19, 0x2b, 0x25, 0x40, 0x92, 0x24, 0x80, 0x7b, 0x4a, 0x4f, 0x59, 0x56, 0x15,
	0x51, 0x21, 0x8d, 0xe7, 0x65, 0x91, 0x92, 0x73, 0x0f, 0x26, 0xb3, 0xee, 0x3b, 0xaf, 0x2e, 0x20,
	0x01, 0xea, 0x89, 0x29, 0x4c, 0x92, 0x7c, 0x82, 0xbb, 0x7d, 0x66, 0xb2, 0x54, 0x30, 0x8d, 0x1e,
	0x94, 0xf1, 0xac, 0x0c, 0x4a, 0xf2, 0x30, 0x98, 0x51, 0xf9, 0x85, 0x52, 0xa7, 0x02, 0x68, 0x34,
	0x4a, 0x02, 0x25, 0xe1, 0x31, 0xdc, 0x57, 0x7b, 0xc2, 0x13, 0x55, 0x25, 0x25, 0xd4, 0x78, 0x51,
	0x1a, 0x9a, 0x3d, 0x81, 0xf9, 0x9b, 0xaf, 0x3c, 0x81, 0x39, 0x90, 0xfa, 0x04, 0x16, 0xdc, 0x23,
	0xd2, 0x81, 0x6a, 0xc1, 0xed, 0x7f, 0x3a, 0xa0, 0x4c, 0x06, 0x6b, 0xac, 0x96, 0xc7, 0xa6, 0xcc,
	0xaf, 0x5e, 0xff, 0x3c, 0x37, 0xb5, 0xb3, 0x73, 0x53, 0xfb, 0x73, 0x6e, 0x6a, 0x5f, 0x2f, 0xcc,
	0xa1, 0xb3, 0x0b, 0x73, 0xe8, 0xf7, 0x85, 0x39, 0xf4, 0x61, 0xa5, 0xed, 0x84, 0x87, 0xc7, 0x07,
	0xf5, 0x16, 0x73, 0x1b, 0x69, 0xdd, 0xcb, 0x8f, 0x4e, 0x23, 0x7d, 0xce, 0x75, 0x7d, 0xe4, 0x07,
	0x15, 0xf1, 0xa4, 0x7b, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xf9, 0xfe, 0x19, 0xe5, 0x09,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateVerse(ctx context.Context, in *MsgCreateVerse, opts ...grpc.CallOption) (*MsgCreateVerseResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	AddAssetToVerse(ctx context.Context, in *MsgAddAssetToVerse, opts ...grpc.CallOption) (*MsgAddAssetToVerseResponse, error)
	RemoveAssetFromVerse(ctx context.Context, in *MsgRemoveAssetFromVerse, opts ...grpc.CallOption) (*MsgRemoveAssetFromVerseResponse, error)
	RenameVerse(ctx context.Context, in *MsgRenameVerse, opts ...grpc.CallOption) (*MsgRenameVerseResponse, error)
	AddOracleToVerse(ctx context.Context, in *MsgAddOracleToVerse, opts ...grpc.CallOption) (*MsgAddOracleToVerseResponse, error)
	AuthorizeKeyToVerse(ctx context.Context, in *MsgAuthorizeKeyToVerse, opts ...grpc.CallOption) (*MsgAuthorizeKeyToVerseResponse, error)
	DeauthorizeKeyToVerse(ctx context.Context, in *MsgDeauthorizeKeyToVerse, opts ...grpc.CallOption) (*MsgDeauthorizeKeyToVerseResponse, error)
	UpdateVerseIcon(ctx context.Context, in *MsgUpdateVerseIcon, opts ...grpc.CallOption) (*MsgUpdateVerseIconResponse, error)
	UpdateVerseDescription(ctx context.Context, in *MsgUpdateVerseDescription, opts ...grpc.CallOption) (*MsgUpdateVerseDescriptionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateVerse(ctx context.Context, in *MsgCreateVerse, opts ...grpc.CallOption) (*MsgCreateVerseResponse, error) {
	out := new(MsgCreateVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/CreateVerse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAssetToVerse(ctx context.Context, in *MsgAddAssetToVerse, opts ...grpc.CallOption) (*MsgAddAssetToVerseResponse, error) {
	out := new(MsgAddAssetToVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/AddAssetToVerse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAssetFromVerse(ctx context.Context, in *MsgRemoveAssetFromVerse, opts ...grpc.CallOption) (*MsgRemoveAssetFromVerseResponse, error) {
	out := new(MsgRemoveAssetFromVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/RemoveAssetFromVerse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RenameVerse(ctx context.Context, in *MsgRenameVerse, opts ...grpc.CallOption) (*MsgRenameVerseResponse, error) {
	out := new(MsgRenameVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/RenameVerse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddOracleToVerse(ctx context.Context, in *MsgAddOracleToVerse, opts ...grpc.CallOption) (*MsgAddOracleToVerseResponse, error) {
	out := new(MsgAddOracleToVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/AddOracleToVerse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AuthorizeKeyToVerse(ctx context.Context, in *MsgAuthorizeKeyToVerse, opts ...grpc.CallOption) (*MsgAuthorizeKeyToVerseResponse, error) {
	out := new(MsgAuthorizeKeyToVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/AuthorizeKeyToVerse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeauthorizeKeyToVerse(ctx context.Context, in *MsgDeauthorizeKeyToVerse, opts ...grpc.CallOption) (*MsgDeauthorizeKeyToVerseResponse, error) {
	out := new(MsgDeauthorizeKeyToVerseResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/DeauthorizeKeyToVerse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVerseIcon(ctx context.Context, in *MsgUpdateVerseIcon, opts ...grpc.CallOption) (*MsgUpdateVerseIconResponse, error) {
	out := new(MsgUpdateVerseIconResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/UpdateVerseIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVerseDescription(ctx context.Context, in *MsgUpdateVerseDescription, opts ...grpc.CallOption) (*MsgUpdateVerseDescriptionResponse, error) {
	out := new(MsgUpdateVerseDescriptionResponse)
	err := c.cc.Invoke(ctx, "/imversed.xverse.Msg/UpdateVerseDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateVerse(context.Context, *MsgCreateVerse) (*MsgCreateVerseResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	AddAssetToVerse(context.Context, *MsgAddAssetToVerse) (*MsgAddAssetToVerseResponse, error)
	RemoveAssetFromVerse(context.Context, *MsgRemoveAssetFromVerse) (*MsgRemoveAssetFromVerseResponse, error)
	RenameVerse(context.Context, *MsgRenameVerse) (*MsgRenameVerseResponse, error)
	AddOracleToVerse(context.Context, *MsgAddOracleToVerse) (*MsgAddOracleToVerseResponse, error)
	AuthorizeKeyToVerse(context.Context, *MsgAuthorizeKeyToVerse) (*MsgAuthorizeKeyToVerseResponse, error)
	DeauthorizeKeyToVerse(context.Context, *MsgDeauthorizeKeyToVerse) (*MsgDeauthorizeKeyToVerseResponse, error)
	UpdateVerseIcon(context.Context, *MsgUpdateVerseIcon) (*MsgUpdateVerseIconResponse, error)
	UpdateVerseDescription(context.Context, *MsgUpdateVerseDescription) (*MsgUpdateVerseDescriptionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateVerse(ctx context.Context, req *MsgCreateVerse) (*MsgCreateVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerse not implemented")
}
func (*UnimplementedMsgServer) AddAssetToVerse(ctx context.Context, req *MsgAddAssetToVerse) (*MsgAddAssetToVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetToVerse not implemented")
}
func (*UnimplementedMsgServer) RemoveAssetFromVerse(ctx context.Context, req *MsgRemoveAssetFromVerse) (*MsgRemoveAssetFromVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAssetFromVerse not implemented")
}
func (*UnimplementedMsgServer) RenameVerse(ctx context.Context, req *MsgRenameVerse) (*MsgRenameVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameVerse not implemented")
}
func (*UnimplementedMsgServer) AddOracleToVerse(ctx context.Context, req *MsgAddOracleToVerse) (*MsgAddOracleToVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOracleToVerse not implemented")
}
func (*UnimplementedMsgServer) AuthorizeKeyToVerse(ctx context.Context, req *MsgAuthorizeKeyToVerse) (*MsgAuthorizeKeyToVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeKeyToVerse not implemented")
}
func (*UnimplementedMsgServer) DeauthorizeKeyToVerse(ctx context.Context, req *MsgDeauthorizeKeyToVerse) (*MsgDeauthorizeKeyToVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeauthorizeKeyToVerse not implemented")
}
func (*UnimplementedMsgServer) UpdateVerseIcon(ctx context.Context, req *MsgUpdateVerseIcon) (*MsgUpdateVerseIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerseIcon not implemented")
}
func (*UnimplementedMsgServer) UpdateVerseDescription(ctx context.Context, req *MsgUpdateVerseDescription) (*MsgUpdateVerseDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerseDescription not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVerse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/CreateVerse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVerse(ctx, req.(*MsgCreateVerse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAssetToVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAssetToVerse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAssetToVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/AddAssetToVerse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAssetToVerse(ctx, req.(*MsgAddAssetToVerse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAssetFromVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAssetFromVerse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAssetFromVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/RemoveAssetFromVerse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAssetFromVerse(ctx, req.(*MsgRemoveAssetFromVerse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RenameVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRenameVerse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RenameVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/RenameVerse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RenameVerse(ctx, req.(*MsgRenameVerse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddOracleToVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddOracleToVerse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddOracleToVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/AddOracleToVerse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddOracleToVerse(ctx, req.(*MsgAddOracleToVerse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AuthorizeKeyToVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAuthorizeKeyToVerse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AuthorizeKeyToVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/AuthorizeKeyToVerse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AuthorizeKeyToVerse(ctx, req.(*MsgAuthorizeKeyToVerse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeauthorizeKeyToVerse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeauthorizeKeyToVerse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeauthorizeKeyToVerse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/DeauthorizeKeyToVerse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeauthorizeKeyToVerse(ctx, req.(*MsgDeauthorizeKeyToVerse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVerseIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVerseIcon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVerseIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/UpdateVerseIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVerseIcon(ctx, req.(*MsgUpdateVerseIcon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVerseDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVerseDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVerseDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imversed.xverse.Msg/UpdateVerseDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVerseDescription(ctx, req.(*MsgUpdateVerseDescription))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imversed.xverse.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVerse",
			Handler:    _Msg_CreateVerse_Handler,
		},
		{
			MethodName: "AddAssetToVerse",
			Handler:    _Msg_AddAssetToVerse_Handler,
		},
		{
			MethodName: "RemoveAssetFromVerse",
			Handler:    _Msg_RemoveAssetFromVerse_Handler,
		},
		{
			MethodName: "RenameVerse",
			Handler:    _Msg_RenameVerse_Handler,
		},
		{
			MethodName: "AddOracleToVerse",
			Handler:    _Msg_AddOracleToVerse_Handler,
		},
		{
			MethodName: "AuthorizeKeyToVerse",
			Handler:    _Msg_AuthorizeKeyToVerse_Handler,
		},
		{
			MethodName: "DeauthorizeKeyToVerse",
			Handler:    _Msg_DeauthorizeKeyToVerse_Handler,
		},
		{
			MethodName: "UpdateVerseIcon",
			Handler:    _Msg_UpdateVerseIcon_Handler,
		},
		{
			MethodName: "UpdateVerseDescription",
			Handler:    _Msg_UpdateVerseDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xverse/tx.proto",
}

func (m *MsgCreateVerse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVerse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVerse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddAssetToVerse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAssetToVerse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAssetToVerse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerseCreator) > 0 {
		i -= len(m.VerseCreator)
		copy(dAtA[i:], m.VerseCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseCreator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AssetCreator) > 0 {
		i -= len(m.AssetCreator)
		copy(dAtA[i:], m.AssetCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetCreator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AssetType) > 0 {
		i -= len(m.AssetType)
		copy(dAtA[i:], m.AssetType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAssetToVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAssetToVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAssetToVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRenameVerse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRenameVerse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRenameVerse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerseNewName) > 0 {
		i -= len(m.VerseNewName)
		copy(dAtA[i:], m.VerseNewName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseNewName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VerseOldName) > 0 {
		i -= len(m.VerseOldName)
		copy(dAtA[i:], m.VerseOldName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseOldName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerseCreator) > 0 {
		i -= len(m.VerseCreator)
		copy(dAtA[i:], m.VerseCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseCreator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRenameVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRenameVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRenameVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAssetFromVerse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAssetFromVerse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAssetFromVerse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerseCreator) > 0 {
		i -= len(m.VerseCreator)
		copy(dAtA[i:], m.VerseCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseCreator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AssetType) > 0 {
		i -= len(m.AssetType)
		copy(dAtA[i:], m.AssetType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAssetFromVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAssetFromVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAssetFromVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddOracleToVerse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOracleToVerse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOracleToVerse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oracle) > 0 {
		i -= len(m.Oracle)
		copy(dAtA[i:], m.Oracle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Oracle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOracleToVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOracleToVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOracleToVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeKeyToVerse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeKeyToVerse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeKeyToVerse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeKeyToVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeKeyToVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeKeyToVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeauthorizeKeyToVerse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeauthorizeKeyToVerse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeauthorizeKeyToVerse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeauthorizeKeyToVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeauthorizeKeyToVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeauthorizeKeyToVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerseIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerseIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerseIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerseDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerseDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerseDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VerseName) > 0 {
		i -= len(m.VerseName)
		copy(dAtA[i:], m.VerseName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerseDescriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerseDescriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerseDescriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerseIconResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerseIconResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerseIconResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateVerse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddAssetToVerse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddAssetToVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRenameVerse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseOldName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseNewName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRenameVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveAssetFromVerse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveAssetFromVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddOracleToVerse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Oracle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddOracleToVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAuthorizeKeyToVerse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAuthorizeKeyToVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeauthorizeKeyToVerse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeauthorizeKeyToVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVerseIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVerseDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerseName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVerseDescriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVerseIconResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateVerse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVerse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVerse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAssetToVerse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAssetToVerse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAssetToVerse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAssetToVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAssetToVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAssetToVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRenameVerse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRenameVerse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRenameVerse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseOldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseOldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseNewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseNewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRenameVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRenameVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRenameVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAssetFromVerse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAssetFromVerse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAssetFromVerse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAssetFromVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAssetFromVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAssetFromVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOracleToVerse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOracleToVerse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOracleToVerse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOracleToVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOracleToVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOracleToVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeKeyToVerse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeKeyToVerse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeKeyToVerse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeKeyToVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeKeyToVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeKeyToVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeauthorizeKeyToVerse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeauthorizeKeyToVerse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeauthorizeKeyToVerse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeauthorizeKeyToVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeauthorizeKeyToVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeauthorizeKeyToVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerseIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerseIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerseIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerseDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerseDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerseDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerseDescriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerseDescriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerseDescriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerseIconResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerseIconResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerseIconResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
